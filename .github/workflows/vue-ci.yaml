# Name your workflow
name: CI

# Set on which events you want run the actions.
# In this case the workflow will run on push for master and on pull request for master and develop branches
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch

jobs:
  CI-Front:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [12]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Cache node_modules
        uses: actions/cache@v2.1.0
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/package-lock.json')) }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run build
        run: npm run build && zip -r frontend.zip dist

      - name: Upload a Build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend.zip
          path: frontend/frontend.zip

      - name: Code coverage
        uses: codecov/codecov-action@v1.0.12
  CI-Front-Admin:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [12]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./frontend-admin

    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Cache node_modules
        uses: actions/cache@v2.1.0
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/package-lock.json')) }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run build
        run: npm run build:prod && zip -r frontend-admin.zip dist

      - name: Upload a Build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend-admin.zip
          path: frontend-admin/frontend-admin.zip
      #      - name: Run unit tests
      #        run: npm run test:unit

      - name: Code coverage
        uses: codecov/codecov-action@v1.0.12
  CI-Backend-Docker:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [12]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./backend
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
      DOCKER_TAG : ${{ github.run_id }}-${{ github.sha }}
    steps:
      - name: Cehckout
        uses: actions/checkout@v2


      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Building Docker Image
        run: |
          docker build -t $REPO:latest -t $REPO:$DOCKER_TAG .
          echo $DOCKER_TAG
      - name: Publish Docker Image
        run: docker push $REPO:$DOCKER_TAG

      - name: Publish Docker Image Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker push $REPO:latest
          cd CD
          git checkout -- wdc-project-backend.yaml
          sed -i -r 's/covid_contact_tracing_system_backend\:[[:alnum:]]+/covid_contact_tracing_system_backend\:$DOCKER_TAG/g' wdc-project-backend.yaml

      - name: trigger argo cd repo
        if: github.ref == 'refs/heads/master'
        uses: EndBug/add-and-commit@v7
        with:
          branch: argo-cd
          message: 'trigger argo cd repo with $DOCKER_TAG '
          add: '*.yaml --force'
          force : true
